package wyg.scw.scwuser.controller;import com.google.gson.Gson;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.util.StringUtils;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RestController;import wyg.scw.common.bean.AppResponse;import wyg.scw.common.utils.AppUtils;import wyg.scw.scwuser.consts.UserAppConsts;import wyg.scw.scwuser.service.UserService;import wyg.scw.scwuser.utils.SmsTemplate;import wyg.scw.scwuser.vo.UserRegistVo;import wyg.scw.scwuser.vo.UserRespVo;import java.util.HashMap;import java.util.Map;import java.util.UUID;import java.util.concurrent.TimeUnit;@Api(tags = "用户登录模块")@Slf4j@RestController("user/info")public class UserController {    @Autowired    private StringRedisTemplate redisTemplate;    @Autowired    private SmsTemplate smsTemplate;    @Autowired    private UserService userService;    /**     * 发送验证码     * @param phoneNum     * @return     */    @ApiOperation(value = "发送验证码")    @ApiImplicitParams ({            @ApiImplicitParam(name = "phoneNum",value = "手机号",required=true , defaultValue="13884188749")    })    @GetMapping("sendSms")    public AppResponse sendSms(String phoneNum){        //1、验证手机号码是否正确        if (!AppUtils.isPhoneNum(phoneNum)){            return AppResponse.fail("手机格式错误");        }        //2、验证码次数是否超过三次        int count = 0;        String countKey = UserAppConsts.PHONE_COUNT_PREFIX + phoneNum + UserAppConsts.PHONE_CODE_SUFFIX;        String countStr = redisTemplate.opsForValue().get(countKey);        if (!StringUtils.isEmpty(countStr)){            count = Integer.parseInt(countStr);        }        log.debug("count:" + count);        if (count>=3){            return AppResponse.fail("验证码次数用尽");        }        //3、是否存在过期验证码        String codeKey = UserAppConsts.PHONE_CODE_PREFIX +phoneNum + UserAppConsts.PHONE_CODE_SUFFIX ;        String codeStr = redisTemplate.opsForValue().get(codeKey);        if (!StringUtils.isEmpty(codeStr)){            return AppResponse.fail("请不要频繁获取验证码，验证码为：" + codeStr);        }        //4、生成验证码、发送短信        codeStr = UUID.randomUUID().toString().replace("_", "").substring(0, 6);        Map<String, String> querys = new HashMap<String, String>();        querys.put(UserAppConsts.SMS_MOBILE, phoneNum); //18093477706        querys.put(UserAppConsts.SMS_PARAM, UserAppConsts.SMS_PARAM_VAULE_PREFIX + codeStr);        querys.put(UserAppConsts.SMS_TPL_ID, UserAppConsts.SMS_TPL_ID_VALUE);        try {            smsTemplate.sendMsg(querys);        } catch (Exception e) {            e.printStackTrace();            return AppResponse.fail(e.getMessage());        }        //5、将验证码存到redis中，次数加一        redisTemplate.opsForValue().set(codeKey,codeStr,10, TimeUnit.MINUTES);        redisTemplate.opsForValue().increment(countKey);//        countStr = redisTemplate.opsForValue().get(countKey);//        redisTemplate.opsForValue().set(countKey,count+"",1,TimeUnit.DAYS);        return AppResponse.ok("验证码发送成功:" + codeStr);    }    /**     * 注册用户     * @param userRegistVo 用户信息vo     * @return     */    @ApiOperation("注册用户")    @PostMapping("doRegist")    public AppResponse doRegist(@RequestBody UserRegistVo userRegistVo){        //1、检验验证码是否过期        String codeKey = UserAppConsts.PHONE_CODE_PREFIX + userRegistVo.getLoginacct() + UserAppConsts.PHONE_CODE_SUFFIX;        String redisCode = redisTemplate.opsForValue().get(codeKey);        if (StringUtils.isEmpty(redisCode)){            return AppResponse.fail("验证码失效");        }        String voCode = userRegistVo.getCode();        if(!redisCode.equalsIgnoreCase(voCode)){            return AppResponse.fail("验证码不正确");        }        //2、保存用户信息        try {            userService.doRegist(userRegistVo);            //3、删除验证码            redisTemplate.delete(codeKey);            return AppResponse.ok("注册成功");        }catch (Exception e){            return AppResponse.fail(e.getMessage());        }    }    @ApiOperation("用户登录")    @PostMapping("doLogin")    public AppResponse doLogin(String loginacct,String userpswd){        UserRespVo userRespVo;        try{            userRespVo = userService.doLogin(loginacct,userpswd);            String tokenSuffix = UUID.randomUUID().toString().replace("_", "");            String token = UserAppConsts.USER_LOGIN_PREFIX + tokenSuffix;            userRespVo.setAccessToken(token);            Gson gson = new Gson();            String userRespVoJson = gson.toJson(userRespVo);            redisTemplate.opsForValue().set(token,userRespVoJson);            return AppResponse.ok().data("userRespVo",userRespVo);        }catch (Exception e){            return AppResponse.fail(e.getMessage());        }    }}